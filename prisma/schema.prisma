generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Sport {
  id Int @id @default(autoincrement())
  title String
  key String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  competitions Competition[]
  positions Position[]

  @@map("sports")
}

model Competition {
  id Int @id @default(autoincrement())
  title String
  key String @unique
  sport Sport @relation(fields: [sportId], references: [id])
  sportId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competitionTeams CompetitionTeams[]

  @@map("competitions")
}

model Team {
  id Int @id @default(autoincrement())
  title String
  key String @unique
  primaryColor String
  secondaryColor String
  tertiaryColor String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competitionTeams CompetitionTeams[]
  teamMembers TeamMember[]
  teamSheets TeamSheet[]

  @@map("teams")
}

model CompetitionTeams {
  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  competitionId Int
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id Int @id @default(autoincrement())
}

model TeamSheet {
  id Int @id @default(autoincrement())
  data Json?
  editId String @default(uuid()) @unique
  shareId String @default(uuid()) @unique
  title String?
  team Team @relation(fields: [teamId], references: [id])
  teamId Int
  user User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teamSheets")
}

model Player {
  id Int @id @default(autoincrement())
  key String @unique
  title String
  firstname String
  lastname String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playerPositions PlayerPosition[]
  teamMembers TeamMember[]

  @@map("players")
}

model TeamMember {
  id Int @id @default(autoincrement())
  team Team @relation(fields: [teamId], references: [id])
  teamId Int
  player Player @relation(fields: [playerId], references: [id])
  playerId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("teamMembers")
}

model Position {
  id Int @id @default(autoincrement())
  sport Sport @relation(fields: [sportId], references: [id])
  sportId Int
  key String @unique // position name i.e. 'prop'
  numbers Int[] // jersey numbers for the position. I.e. 'prop' can be [1,3]
  title String // position name i.e. 'Prop'
  category String // 'Forward' or 'Back'

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playerPositions PlayerPosition[]

  @@map("positions")
}

model PlayerPosition {
  id Int @id @default(autoincrement())
  player Player @relation(fields: [playerId], references: [id])
  playerId Int
  position Position @relation(fields: [positionId], references: [id])
  positionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("playerPositions")
}

model User {
  id Int @id @default(autoincrement())
  email String?
  firstname String?
  lastname String?
  username String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamSheets TeamSheet[]
  userAccounts UserAccount[]

  @@map("users")
}

model UserAccount {
  id Int @id @default(autoincrement())
  provider String
  providerId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerId])
  @@map("userAccounts")
}